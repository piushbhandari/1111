/* ================================================================
   MIXINS
   ================================================================ */

/* ================================================================
   REM Mixin
   ================================================================ */

// usage: @include x-rem(font-size, 14px)
// usage: @include x-rem(margin, 0 12px 2 1.2)
// usage: @include x-rem(padding, 1.5 24px)
//
// thanks to Eric Meyer for https://github.com/ericam/susy
// and Hans Christian Reinl for http://drublic.de/blog/rem-fallback-sass-less/

@mixin x-rem($property, $values) {
  // Create a couple of empty lists as output buffers.
  $base-font-size: 16px; // should be consistent with your html/body font-size
  $px-values: ();
  $rem-values: ();

  // Loop through the $values list
  @each $value in $values {
    // For each property value, if it's in rem or px, derive both rem and
    // px values for it and add those to the end of the appropriate buffer.
    // Ensure all pixel values are rounded to the nearest pixel.
    @if $value == 0 or $value == 0px {
      // 0 -- use it without a unit
      $px-values: join($px-values, 0);
      $rem-values: join($rem-values, 0);
    } @else if
      type-of($value) ==
      number and not
      unitless($value) and
      (unit($value) == px)
    {
      // px value given - calculate rem value from base-font-size
      $new-rem-value: $value / $base-font-size;
      $px-values: join($px-values, round($value));
      $rem-values: join($rem-values, #{$new-rem-value}rem);
    } @else if
      type-of($value) ==
      number and not
      unitless($value) and
      (unit($value) == "%")
    {
      // % value given - don't add px or rem
      $px-values: join($px-values, #{$value});
      $rem-values: join($rem-values, #{$value});
    } @else if $value == auto {
      // auto - don't add px or rem
      $px-values: join($px-values, auto);
      $rem-values: join($rem-values, auto);
    } @else {
      // unitless value - use those directly as rem and calculate the px-fallback
      $px-values: join($px-values, round($value * $base-font-size));
      $rem-values: join($rem-values, #{$value}rem);
    }
  }

  // output the converted rules
  #{$property}: $px-values;
  #{$property}: $rem-values;
}

/* ================================================================
   CLEARFIX MIXIN

   - EXAMPLE:

   div {
     @include clearfix;
   }
   ================================================================ */

@mixin clearfix {
  &:after {
    content: "";
    display: table;
    clear: both;
  }
}

/* ================================================================
RESET STYLES BUTTON MIXIN

- EXAMPLE:

button {
  @include resetBtn;
}
================================================================ */

@mixin resetBtn {
  background: none;
  border: none;
  padding: 0;
  cursor: pointer;
  transition: $trans;
}

/* ================================================================
RESET STYLES LIST MIXIN

- EXAMPLE:

ul {
  @include resetList;
}
================================================================ */

@mixin resetList {
  margin: 0;
  padding: 0;
  list-style: none;
}

/* ================================================================
INPUT PLACEHOLDER MIXIN

- EXAMPLE:

input {
  @include placeholder {
    color: red;
    opacity: 1;
  }
}
================================================================ */

@mixin placeholder {
  &::-webkit-input-placeholder {
    @content;
  }
  &:-moz-placeholder {
    @content;
  }
  &::-moz-placeholder {
    @content;
  }
  &:-ms-input-placeholder {
    @content;
  }
}

/* ================================================================
   PSUEDO MIXIN

   - EXAMPLE:

   div::after {
     @include pseudo;
     top: -1rem; left: -1rem;
   }
   ================================================================ */

@mixin pseudo($display: block, $pos: absolute, $content: "") {
  content: $content;
  display: $display;
  position: $pos;
}

/* ================================================================
   Breakpoint mixin
   ================================================================ */

@mixin breakpoint($point) {
  @if $point == retina {
    @media (-webkit-min-device-pixel-ratio: 2), (min-resolution: 192dpi) {
      @content;
    }
  }
  // 16px baseline (256px) s = small
  @else if $point == s {
    @media (min-width: $bp-s) {
      @content;
    }
  }
  // 16px baseline (580px) sw = small-wide
  @else if $point == sw {
    @media (min-width: $bp-sw) {
      @content;
    }
  }
  // 16px baseline (580px - 767px) sw-m = small-wide TO medium
  @else if $point == sw-m {
    @media (min-width: $bp-sw) and (max-width: $bp-m) {
      @content;
    }
  }
  // 16px baseline (256px - 767px) s-m = small TO medium
  @else if $point == s-m {
    @media (min-width: $bp-s) and (max-width: $bp-m) {
      @content;
    }
  }
  // 16px baseline (256px - 959px) s-l = small TO large
  @else if $point == s-l {
    @media (min-width: $bp-s) and (max-width: $bp-l) {
      @content;
    }
  } @else if $point == s-xl {
    @media (min-width: $bp-s) and (max-width: $bp-xl) {
      @content;
    }
  }
  // 16px baseline (768px) m = medium
  @else if $point == m {
    @media (min-width: $bp-m) {
      @content;
    }
  }
  // 16px baseline (768px - 959px) m-l = medium TO large
  @else if $point == m-l {
    @media (min-width: $bp-m) and (max-width: $bp-l) {
      @content;
    }
  }
  // 16px baseline (768px - 1024px) m-lg = medium TO large
  @else if $point == m-lg {
    @media (min-width: $bp-m) and (max-width: $bp-lg) {
      @content;
    }
  }
  // 16px baseline (768px - 1152) m-l = medium TO xlarge
  @else if $point == m-xl {
    @media (min-width: $bp-m) and (max-width: $bp-xl) {
      @content;
    }
  }
  // 16px baseline (960px) l = large
  @else if $point == l {
    @media (min-width: $bp-l) {
      @content;
    }
  }
  // 16px baseline (1024px) lg = large
  @else if $point == lg {
    @media (min-width: $bp-lg) {
      @content;
    }
  }
  // 16px baseline (1152px) lx = extra large
  @else if $point == xl {
    @media (min-width: $bp-xl) {
      @content;
    }
  } @else {
    @media (min-width: $point) {
      @content;
    }
  }
}

/* ================================================================
   CUSTOM
   ================================================================ */

@function sqrt($r) {
  $x0: 1;
  $x1: $x0;

  @for $i from 1 through 10 {
    $x1: $x0 - ($x0 * $x0 - abs($r)) / (2 * $x0);
    $x0: $x1;
  }

  @return $x1;
}

// Get a straight px-to-rem value
// usage: pxtorem(5px)

@function pxtorem($size, $base: 16px) {
  $remSize: $size / $base;
  @return #{$remSize}rem;
}

@function strip-unit($value) {
  @return $value / ($value * 0 + 1);
}

@function convert($value, $convertUnit) {
  $currentUnit: unit($value);

  @if $currentUnit == $convertUnit {
    @return $value;
  }

  $value: strip-unit($value);

  @if $currentUnit == px {
    @if $convertUnit == em {
      @return $value / 16 + 0em;
    } @else if $convertUnit == percent {
      @return percentage($value / 16);
    }
  } @else if $currentUnit == em {
    @if $convertUnit == px {
      @return $value * 16 + 0px;
    } @else if $convertUnit == percent {
      @return percentage($value);
    }
  } @else if $currentUnit == percent {
    @if $convertUnit == px {
      @return $value * 16 / 100 + 0px;
    } @else if $convertUnit == em {
      @return $value / 100 + 0em;
    }
  } @else if $currentUnit == pts {
    @if $convertUnit == px {
      @return $value * 1.3333 +0px;
    } @else if $convertUnit == em {
      @return $value / 12 + 0em;
    } @else if $convertUnit == percent {
      @return percentage($value / 12);
    }
  }
}

@mixin fluid-type($min-vw, $max-vw, $min-font-size, $max-font-size) {
  $min-vw: convert($min-vw, px);
  $max-vw: convert($max-vw, px);
  $min-font-size: convert($min-font-size, px);
  $max-font-size: convert($max-font-size, px);

  $u1: unit($min-vw);
  $u2: unit($max-vw);
  $u3: unit($min-font-size);
  $u4: unit($max-font-size);

  @if $u1 == $u2 and $u1 == $u3 and $u1 == $u4 {
    & {
      font-size: $min-font-size;
      @media screen and (min-width: $min-vw) {
        font-size: calc(
          #{$min-font-size} + #{strip-unit($max-font-size - $min-font-size)} *
            ((100vw - #{$min-vw}) / #{strip-unit($max-vw - $min-vw)})
        );
      }
      @media screen and (min-width: $max-vw) {
        font-size: $max-font-size;
      }
    }
  }
}

@mixin lazy-fade-in($color: #f5f5f5) {
  &.b-lazy,
  &.b-lazy-wrapper {
    position: relative;

    &::before {
      content: "";
      position: absolute;
      top: 0;
      left: 0;
      width: 100%;
      height: 100%;
      pointer-events: none;
      background: $color;
      transition: $trans;
    }

    &.b-loaded::before,
    &.b-lazy-wrapper-done::before {
      background: transparentize($color: $color, $amount: 1);
    }
  }
}

@mixin box($width, $height: $width) {
  width: $width;
  height: $height;
}

// /* ===== Usage ===== */
// div {
//   // You can pass width && height
//   @include box(200px, 300px);
//   /* or just pass width and the height
//      will default to the width value */
//   @include box(200px);
// }

@mixin font-size($font-size, $line-height: normal, $letter-spacing: normal) {
  font-size: $font-size * 1px;
  // font-size: $font-size * 0.1rem;
  // example using rem values and 62.5% font-size so 1rem = 10px

  @if $line-height==normal {
    line-height: normal;
  } @else {
    line-height: $line-height / $font-size;
  }

  @if $letter-spacing==normal {
    letter-spacing: normal;
  } @else {
    letter-spacing: #{$letter-spacing / $font-size}em;
  }
}

// /* ===== Usage ===== */
// p {
//   @include font-size(12, 18, 1.2);
//   // returns
//   font-size: 12px;
//   line-height: 1.5; // 18 / 12
//   letter-spacing: 0.1em;
// }

@mixin cover-background {
  background-repeat: no-repeat;
  background-size: cover;
  background-position: center;
}

// /* ===== Usage ===== */
// div {
//   background-image: url("cute-doggo.png");
//   @include cover-background;
// }

@mixin pseudo2(
  $width: 100%,
  $height: 100%,
  $display: inline-block,
  $pos: absolute,
  $content: ""
) {
  content: $content;
  display: $display;
  position: $pos;
  @include box($width, $height);
}

// /* ===== Usage ===== */
// div {
//   position: relative;
//   width: 200px;
//   height: 200px;

//   &:after {
//     @include pseudo(100px, 100px);
//   }
// }

// This mixin takes all the hassle out of creating that triangle you'll see coming out of most traditional tooltips, all without images, you just specify it's colour, how big you want it, the direction it's going to come out of your element and you're done!

@mixin css-triangle(
  $color,
  $direction,
  $size: 6px,
  $position: absolute,
  $round: false
) {
  @include pseudo($pos: $position);
  width: 0;
  height: 0;
  @if $round {
    border-radius: 3px;
  }
  @if $direction == down {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-top: $size solid $color;
    margin-top: 0 - round($size / 2.5);
  } @else if $direction == up {
    border-left: $size solid transparent;
    border-right: $size solid transparent;
    border-bottom: $size solid $color;
    margin-bottom: 0 - round($size / 2.5);
  } @else if $direction == right {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-left: $size solid $color;
    margin-right: -$size;
  } @else if $direction == left {
    border-top: $size solid transparent;
    border-bottom: $size solid transparent;
    border-right: $size solid $color;
    margin-left: -$size;
  }
}
// position absolute
@mixin abs-position() {
  position: absolute;
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}

/* ================================================================
   FLEX MIXIN - EXAMPLE:

    .flex-container {
        @include flex-settings(null, column, null, center);
      
    }
   ================================================================ */

@mixin flex-settings(
  $gap: 0,
  $direction: row,
  $align-items: stretch,
  $justify-content: flex-start
) {
  display: flex;
  flex-direction: $direction;
  gap: $gap;
  align-items: $align-items;
  justify-content: $justify-content;
}
